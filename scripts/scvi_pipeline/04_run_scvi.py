#!/usr/bin/env python3
"""Train an scVI model on the 2k-HVG dataset and write integrated outputs.

Usage example (run manually):

    python scripts/scvi_pipeline/04_run_scvi.py \
        --hvg-path /rds/.../scvi_integration/outputs_2/adata_hvg2k_TM.h5ad \
        --out-root /rds/.../scvi_integration \
        --model-dir /rds/.../scvi_integration/models_2/scvi_TM_hvg2k

This script mirrors the previous workflow (2k HVGs, tutorial style) but reads the
latest per-sample post-QC AnnData files generated by the scQC-flow pipeline.

It does not execute automatically; run it yourself once the inputs are ready.
"""

import argparse
from pathlib import Path

import matplotlib

matplotlib.use("Agg")  # headless plotting

import matplotlib.pyplot as plt
import scanpy as sc
import scvi


def save_umap(adata, color, out_path, **kwargs):
    sc.pl.umap(adata, color=color, show=False, **kwargs)
    plt.savefig(out_path, dpi=200, bbox_inches="tight")
    plt.close()


def main():
    parser = argparse.ArgumentParser(description="Train scVI on 2k HVG dataset")
    parser.add_argument("--hvg-path", type=Path, required=True, help="Path to adata_hvg2k_TM.h5ad")
    parser.add_argument("--out-root", type=Path, required=True, help="scvi_integration base directory")
    parser.add_argument("--model-dir", type=Path, required=True, help="Directory to store trained scVI model")
    parser.add_argument("--n-layers", type=int, default=2)
    parser.add_argument("--n-latent", type=int, default=30)
    parser.add_argument("--max-epochs", type=int, default=150)
    parser.add_argument("--early-stopping", action="store_true", help="Enable early stopping")
    parser.add_argument("--lr", type=float, default=1e-3)
    parser.add_argument("--seed", type=int, default=0)
    parser.add_argument("--umap-min-dist", type=float, default=0.3)
    parser.add_argument("--leiden-res", nargs="*", type=float, default=[0.5, 0.8, 1.2])
    args = parser.parse_args()

    scvi.settings.seed = args.seed
    scvi.settings.dl_num_workers = 0

    adata = sc.read_h5ad(args.hvg_path)

    if "counts" not in adata.layers:
        raise ValueError("counts layer missing. Ensure 01_build_per_sample_h5ad.py was run.")
    if "sample" not in adata.obs.columns:
        raise ValueError("sample column missing from obs. It is required as the batch key.")

    sc.pp.filter_genes(adata, min_counts=1)  # guard against empty features

    scvi.model.SCVI.setup_anndata(adata, layer="counts", batch_key="sample")

    model = scvi.model.SCVI(
        adata,
        n_layers=args.n_layers,
        n_latent=args.n_latent,
        gene_likelihood="zinb",
    )

    model.train(
        max_epochs=args.max_epochs,
        early_stopping=args.early_stopping,
        plan_kwargs={"lr": args.lr},
    )

    latent = model.get_latent_representation()
    adata.obsm["X_scVI"] = latent

    sc.pp.neighbors(adata, use_rep="X_scVI")
    sc.tl.umap(adata, min_dist=args.umap_min_dist)

    leiden_keys = []
    for res in args.leiden_res:
        key = f"leiden_{res}".replace(".", "p")
        sc.tl.leiden(adata, resolution=res, key_added=key)
        leiden_keys.append(key)

    model_dir = Path(args.model_dir)
    model_dir.mkdir(parents=True, exist_ok=True)
    model.save(model_dir, overwrite=True)

    outputs_dir = Path(args.out_root) / "outputs_2"
    outputs_dir.mkdir(parents=True, exist_ok=True)
    adata_path = outputs_dir / "adata_scvi_TM2k_integrated.h5ad"
    adata.write_h5ad(adata_path)

    plots_dir = outputs_dir / "plots"
    plots_dir.mkdir(parents=True, exist_ok=True)
    save_umap(adata, color="sample", out_path=plots_dir / "umap_scvi_by_sample.png")
    if "condition" in adata.obs:
        save_umap(adata, color="condition", out_path=plots_dir / "umap_scvi_by_condition.png")
    for key in leiden_keys:
        save_umap(adata, color=key, out_path=plots_dir / f"umap_scvi_{key}.png")

    print(f"scVI model saved to {model_dir}")
    print(f"Integrated AnnData written to {adata_path}")
    print(f"UMAP plots available in {plots_dir}")


if __name__ == "__main__":
    raise SystemExit(main())

